import Foundation
import SwiftUI
import PDFKit

#if canImport(UIKit)
import UIKit
#endif

class PDFGenerator {
    static let shared = PDFGenerator()

    private init() {}

    // MARK: - Quote PDF Generation
    func generateQuotePDF(breakdown: PricingEngine.PriceBreakdown, customerName: String) -> Data? {
        let pdfRenderer = UIGraphicsPDFRenderer(bounds: CGRect(x: 0, y: 0, width: 612, height: 792))

        return pdfRenderer.pdfData { context in
            context.beginPage()

            let title = "DTS Quote"
            let titleAttributes: [NSAttributedString.Key: Any] = [
                .font: UIFont.boldSystemFont(ofSize: 24),
                .foregroundColor: UIColor.black
            ]

            let bodyAttributes: [NSAttributedString.Key: Any] = [
                .font: UIFont.systemFont(ofSize: 12),
                .foregroundColor: UIColor.black
            ]

            // Title
            title.draw(at: CGPoint(x: 50, y: 50), withAttributes: titleAttributes)

            // Customer Name
            let customerText = "Customer: \(customerName)"
            customerText.draw(at: CGPoint(x: 50, y: 100), withAttributes: bodyAttributes)

            // Date
            let dateText = "Date: \(Date().formatted(.medium))"
            dateText.draw(at: CGPoint(x: 50, y: 130), withAttributes: bodyAttributes)

            // Quote Details
            let quoteDetails = """
            Materials: $\(String(format: "%.2f", breakdown.materialsCost))
            Labor: $\(String(format: "%.2f", breakdown.laborCost))
            Subtotal: $\(String(format: "%.2f", breakdown.subtotal))
            Markup: $\(String(format: "%.2f", breakdown.markupAmount))
            Tax: $\(String(format: "%.2f", breakdown.taxAmount))
            Total: $\(String(format: "%.2f", breakdown.totalPrice))
            """
            let quoteRect = CGRect(x: 50, y: 160, width: 500, height: 400)
            quoteDetails.draw(in: quoteRect, withAttributes: bodyAttributes)
        }
    }

    // MARK: - Job Report PDF Generation
    func generateJobReportPDF(job: JobberJob) -> Data? {
        let pdfRenderer = UIGraphicsPDFRenderer(bounds: CGRect(x: 0, y: 0, width: 612, height: 792))

        return pdfRenderer.pdfData { context in
            context.beginPage()

            let title = "Job Report"
            let titleAttributes: [NSAttributedString.Key: Any] = [
                .font: UIFont.boldSystemFont(ofSize: 24),
                .foregroundColor: UIColor.black
            ]

            let bodyAttributes: [NSAttributedString.Key: Any] = [
                .font: UIFont.systemFont(ofSize: 12),
                .foregroundColor: UIColor.black
            ]

            // Title
            title.draw(at: CGPoint(x: 50, y: 50), withAttributes: titleAttributes)

            // Job Details
            let jobDetails = """
            Job ID: \(job.jobId)
            Client: \(job.clientName)
            Address: \(job.address)
            Status: \(job.status)
            Scheduled: \(job.scheduledAt.formatted(.dateTime))

            Generated by DTS App
            Date: \(Date().formatted(.dateTime))
            """

            let jobRect = CGRect(x: 50, y: 100, width: 500, height: 400)
            jobDetails.draw(in: jobRect, withAttributes: bodyAttributes)
        }
    }

    // MARK: - Save PDF to Documents
    func savePDFToDocuments(data: Data, filename: String) -> URL? {
        guard let documentsURL = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first else {
            return nil
        }

        let fileURL = documentsURL.appendingPathComponent("\(filename).pdf")

        do {
            try data.write(to: fileURL)
            return fileURL
        } catch {
            print("Error saving PDF: \(error)")
            return nil
        }
    }
}
